import { Button, VerticalBox, HorizontalBox, Slider, CheckBox, ComboBox} from "std-widgets.slint";

component Buttoner inherits Rectangle {
    property <color> first_back: #333333;
    property <color> second_back: #374352;
    property <color> third_back: #0860b3;
    property <color> font_color: #ffffffcc;
    property <length> border_radius_val: 10px;

    in-out property text <=> txt.text;
    callback clicked <=> touch.clicked;
    border-radius: border_radius_val;
    border-width: 1px;
    border-color: root.background.darker(25%);
    background: touch.pressed ? third_back : touch.has-hover ? second_back :  #445566;
    height: 40px;
    min-width: txt.preferred-width + 20px;
    txt := Text {
        font-size: 20px;
        x: (parent.width - self.width)/2 + (touch.pressed ? 2px : 0);
        y: (parent.height - self.height)/2 + (touch.pressed ? 1px : 0);
        color: touch.pressed ? #fff : #eee;
    }
    touch := TouchArea { }
}


export component AppWindow inherits Window {
    property <color> first_back: #333333;
    property <color> second_back: #374352;
    property <color> third_back: #0860b3;
    property <color> font_color: #ffffffcc;
    property <length> border_radius_val: 10px;


    background: @linear-gradient(135deg, first_back 0%, second_back 50%, third_back 100%);
    in-out property<string> password: "Password";
    in-out property<int> words_num: 3;
    in-out property <int> password_set: 1;
    in-out property<string> selected_wordset: "Common Words";
    callback request-generate-password();
    callback request-change-words_num();
    callback request-copy-password();

    GridLayout {
        spacing: 5px;
        padding: 25px;
        Row { // Title 
            HorizontalLayout {
                max-height: 50px;
                Text {
                    overflow: TextOverflow.clip;
                    text: "Passworder";
                    color: font_color;
                    font-italic: true;
                    font-size: 40px;
                    horizontal-alignment: TextHorizontalAlignment.center;
                    vertical-alignment: TextVerticalAlignment.top;
                    
                }       
            }
        }
        Row { // Place for printing generated password and copying it
            GridLayout {
                Text { // Place for printing generated password
                    overflow: TextOverflow.clip;
                    text: "        \{root.password}";
                    wrap: TextWrap.char-wrap;
                    color: font_color;
                    font-italic: false;
                    font-size: 30px;
                    horizontal-alignment: TextHorizontalAlignment.center;
                    vertical-alignment: TextVerticalAlignment.center;
                }
                Buttoner { // Copy Button        
                    property <int> value: 2;
                    width: 50px;
                    Image {
                        source: @image-url("../imgs/copy-icon.png");
                        width: parent.width * 0.9;
                        height: parent.height;
                    }
                    clicked => {
                        root.request-copy-password();
                        popup.visible = true;
                        value = 2; timer.running = true; 
                    } 
                    popup := Dialog { // Popup message
                        visible: false;
                        y: parent.y - 40px;
                        Rectangle {
                            Text {
                                text: "Copied";
                                color: font_color;
                                font-size: 20px;
                                horizontal-alignment: center;
                                vertical-alignment: center;
                            }
                            background: #14161b61;
                            border-radius: 5px;
                        }
                    }
                    timer := Timer { // Logic for popup time 
                        interval: 0.5s;
                        running: true;
                        triggered() => {
                            value -= 1;
                            if (value == 0) {
                                self.running = false;
                                popup.visible = false;
                            }
                        }
                    }
                }
            }
        }
        Row { // Button for generating new password
            Button {
                    text: "Generate new password";
                    clicked => {
                        root.request-generate-password();
                    }
                    preferred-width: 10px;

                }

            }

        Row { // Slider for choosing amount of words in password
            HorizontalBox {
                Slider {
                    value: root.words_num;
                    minimum: 1;
                    maximum: 5;
                    changed => {
                        root.words_num = self.value;
                        root.request-change-words_num();
                    }
                }
                max-height: 50px;
            }
        }
        Row { // Displaying amount of chosen words and choosing word sets
            HorizontalBox { 
                spacing: root.width *0.1;
                Text {
                    text: "Number of words: \{root.words_num}";
                    color: font_color;
                    vertical-alignment: center;
                    horizontal-alignment: center;
                    font-size: 20px;
                }
                ComboBox {
                    enabled: true;
                    max-height: 10px; 
                    model: ["Common Words", "Words Dictionary"];
                    current-index: 0;
                    current-value: "Common Words";
                    selected => {
                        // Handle selection change
                        root.selected_wordset = self.current_value;
                    }
                }
            }
        }
        Row { // Empty space for blocking situation when word set lists go beyond app window
            Rectangle {
                min-height: 16px; 
            }
        }
    }
}

